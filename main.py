import logging
import openpyxl
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from typing import List

API_TOKEN = '6359219248:AAH9bqLUP0MnvSYpnsKjcJUs7PQ1uNHmoWM'  # Replace with your token

ADMIN_IDS: List[int] = []  # Populate with admin user IDs

logging.basicConfig(level=logging.INFO)

welcome_start = False

# States
# Define states
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class MenuState(StatesGroup):
    product_info = State()

class QuestionState(StatesGroup):
    waiting_for_contact = State()
    waiting_for_question_text = State()
    waiting_for_media = State()

class ReportProblemState(StatesGroup):
    waiting_for_contact = State()
    waiting_for_marketplace_choice = State()
    waiting_for_message = State()
    waiting_for_media = State()


# Read admin IDs from a text file
def load_admin_ids():
    try:
        with open("admin_ids.txt", "r") as f:
            for line in f:
                ADMIN_IDS.append(int(line.strip()))
    except FileNotFoundError:
        logging.warning("admin_ids.txt file not found, no admins loaded.")

load_admin_ids()

@dp.message_handler(lambda message: message.text == "üåöüåöüåö")
async def add_new_admin(message: types.Message):
    new_admin_id = message.from_user.id
    with open("admin_ids.txt", "a+") as f:
        f.seek(0)  # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
        admin_ids = f.read().splitlines()
        if str(new_admin_id) not in admin_ids:  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∞–¥–º–∏–Ω –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
            f.write(f"{new_admin_id}\n")  # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π ID –≤ —Ñ–∞–π–ª
            await message.reply("–ù–æ–≤—ã–π –∞–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            ADMIN_IDS.append(new_admin_id)  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –ø–∞–º—è—Ç–∏
        else:
            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@dp.message_handler(commands=['excel'])
async def send_excel_files(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ problems.xlsx
    with open('problems.xlsx', 'rb') as problems_file:
        await message.answer_document(problems_file)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ questions.xlsx
    with open('questions.xlsx', 'rb') as questions_file:
        await message.answer_document(questions_file)


@dp.message_handler(commands=['start'], state='*')
async def send_welcome_and_show_main_menu(message: types.Message, state: FSMContext):
    global welcome_start
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await state.reset_state(with_data=True)

    if welcome_start == False:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        welcome_message = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–µ–Ω–¥–∞ IHI. –ú—ã –æ—á–µ–Ω—å –¥–æ—Ä–æ–∂–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ "
            "–æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ "
            "–Ω–∏–∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ª–∏–Ω–µ–π–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ IHI, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∞ —Ç–∞–∫–∂–µ —Å–æ–æ–±—â–∏—Ç—å –æ –≤–æ–∑–Ω–∏–∫—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ."
        )
        await message.answer(welcome_message)

    welcome_start = True

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton("üì¶ –ü—Ä–æ–¥—É–∫—Ü–∏—è IHI", callback_data='product_info'),
        InlineKeyboardButton("ü§î –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question'),
        InlineKeyboardButton("‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data='report_problem')
    ]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'product_info', state='*')
async def handle_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    await MenuState.product_info.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ product_info

    keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton("üõí OZON", callback_data='ozon'),
        InlineKeyboardButton("üõçÔ∏è Wildberries", callback_data='wildberries'),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
    ]
    keyboard.add(*buttons)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É:", reply_markup=keyboard)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è product_info
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è product_info
@dp.callback_query_handler(state=MenuState.product_info)
async def handle_product_info(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    action = callback_query.data

    if action == 'ozon':
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ IHI –Ω–∞ OZON:\n\nhttps://www.ozon.ru/brand/ihi-100869869/")
        await send_welcome_and_show_main_menu(callback_query.message, state)
    elif action == 'wildberries':
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ IHI –Ω–∞ WildBerries:\n\nhttps://www.wildberries.ru/brands/910076-IHI")
        await send_welcome_and_show_main_menu(callback_query.message, state)
    elif action == "back":
        await send_welcome_and_show_main_menu(callback_query.message, state)

    await state.finish()


# Handler for "Ask a question" callback - assumes implementation is within the state context
@dp.callback_query_handler(lambda c: c.data == 'ask_question')
async def ask_for_contact(callback_query: types.CallbackQuery, state: FSMContext):
    await QuestionState.waiting_for_contact.set()
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    contact_button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üìû", request_contact=True)
    keyboard.add(contact_button)
    await bot.send_message(callback_query.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.",
                           reply_markup=keyboard)


# Handling the back button functionality correctly to return to the main menu from any state
@dp.callback_query_handler(text='back_to_menu', state='*')
async def back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state()

# Adjusting the contact received handler to capture contact and ask for the question text
@dp.message_handler(content_types=types.ContentType.CONTACT, state=QuestionState.waiting_for_contact)
async def contact_received(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await QuestionState.waiting_for_question_text.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

# Processing the question text and asking for optional media
@dp.message_handler(state=QuestionState.waiting_for_question_text)
async def question_text_received(message: types.Message, state: FSMContext):
    await state.update_data(message=message.text)
    skip_button = InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥", callback_data='skip_media')
    keyboard = InlineKeyboardMarkup().add(skip_button)
    await QuestionState.waiting_for_media.set()
    await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—Ç—å –º–µ–¥–∏–∞, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥'.", reply_markup=keyboard)

@dp.callback_query_handler(text='skip_media', state=QuestionState.waiting_for_media)
async def skip_media(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await send_data_to_admins(callback_query.message, state)
    await state.finish()

@dp.message_handler(content_types=['photo', 'video'], state=QuestionState.waiting_for_media)
async def media_received(message: types.Message, state: FSMContext):
    await send_data_to_admins(message, state, is_media=True)
    await state.finish()

async def send_data_to_admins(message: types.Message, state: FSMContext, is_media: bool = False):
    user_data = await state.get_data()
    print("—Ç—É—Ç")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è username
    username = message.from_user.username
    user_display_name = f"@{username}" if username else f"{message.from_user.first_name} {message.from_user.last_name}".strip()

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id,
                               f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 'ü§î –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':\n"
                               f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone']}\n"
                               f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_data.get('message', 'No message provided')}\n")
        if is_media:
            if message.photo:
                await bot.send_photo(admin_id, photo=message.photo[-1].file_id)
            elif message.video:
                await bot.send_video(admin_id, video=message.video[-1].file_id)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    welcome_message = (
        "–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! –° –£–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–µ–Ω–¥–∞ IHI!"
    )
    await message.answer(welcome_message)
    await send_welcome_and_show_main_menu(message, state)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª
    try:
        wb = openpyxl.load_workbook('questions.xlsx')  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    except FileNotFoundError:
        wb = Workbook()  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        ws = wb.active
        ws.append(['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–°–æ–æ–±—â–µ–Ω–∏–µ'])
    else:
        ws = wb.active

    row_data = [user_display_name, user_data['phone'], user_data.get('message', 'No message provided')]
    ws.append(row_data)

    wb.save('questions.xlsx')






@dp.callback_query_handler(lambda c: c.data == 'report_problem')
async def report_problem_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    await ReportProblemState.waiting_for_contact.set()
    contact_button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üìû", request_contact=True)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(contact_button)
    await bot.send_message(callback_query.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.",
                           reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(content_types=ContentType.CONTACT, state=ReportProblemState.waiting_for_contact)
async def contact_received(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)

    buttons = [
        InlineKeyboardButton("Ozon", callback_data='ozon'),
        InlineKeyboardButton("Wildberries", callback_data='wildberries')
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –≥–¥–µ –ø–æ–∫—É–ø–∞–ª–∏ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    await ReportProblemState.waiting_for_marketplace_choice.set()

@dp.callback_query_handler(state=ReportProblemState.waiting_for_marketplace_choice)
async def marketplace_choice_received(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(marketplace=callback_query.data)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await ReportProblemState.waiting_for_message.set()

@dp.callback_query_handler(text='skip_step', state=ReportProblemState.waiting_for_message)
async def skip_media_step(callback_query: types.CallbackQuery, state: FSMContext):
    await send_data_to_admins_two(callback_query.message, state)
    await state.finish()

@dp.message_handler(state=ReportProblemState.waiting_for_message, content_types=ContentType.TEXT)
async def text_message_received(message: types.Message, state: FSMContext):
    await state.update_data(message=message.text)
    skip_button = InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_media_upload')
    keyboard = InlineKeyboardMarkup().add(skip_button)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. –ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.", reply_markup=keyboard)
    await ReportProblemState.waiting_for_media.set()

@dp.callback_query_handler(text='skip_media_upload', state=ReportProblemState.waiting_for_media)
async def skip_media_upload(callback_query: types.CallbackQuery, state: FSMContext):
    await send_data_to_admins_two(callback_query.message, state)
    await state.finish()

@dp.message_handler(content_types=[ContentType.PHOTO, ContentType.VIDEO], state=ReportProblemState.waiting_for_media)
async def media_received(message: types.Message, state: FSMContext):
    if message.content_type == ContentType.PHOTO:
        media_id = message.photo[-1].file_id
    else:  # ContentType.VIDEO
        media_id = message.video.file_id
    await state.update_data(media_id=media_id)
    await send_data_to_admins_two(message, state, is_media=True)
    await state.finish()

async def send_data_to_admins_two(message: types.Message, state: FSMContext, is_media: bool = False):
    user_data = await state.get_data()
    marketplace = user_data.get('marketplace', '–ù–µ —É–∫–∞–∑–∞–Ω')
    phone = user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
    user_message = user_data.get('message', '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
    media_id = user_data.get('media_id', None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è username
    username = message.from_user.username
    user_display_name = f"@{username}" if username else f"{message.from_user.first_name} {message.from_user.last_name}".strip()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id,
                               f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display_name} —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–±–ª–µ–º–µ:\n"
                               f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace}\n"
                               f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
                               f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}\n")
        if is_media and media_id:
            if message.photo:
                await bot.send_photo(admin_id, photo=media_id)
            elif message.video:
                await bot.send_video(admin_id, video=media_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª
    try:
        wb = openpyxl.load_workbook('problems.xlsx')  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    except FileNotFoundError:
        wb = Workbook()  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        ws = wb.active
        ws.append(['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–°–æ–æ–±—â–µ–Ω–∏–µ'])
    else:
        ws = wb.active

    row_data = [user_display_name, marketplace, phone, user_message]
    ws.append(row_data)

    wb.save('problems.xlsx')

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await send_welcome_and_show_main_menu(message, state)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)